plugins {
  id 'application'
  id 'io.spring.dependency-management' version '1.0.5.RELEASE'
  id 'org.springframework.boot' version '2.0.1.RELEASE'
  id 'org.owasp.dependencycheck' version '3.1.2'
  id 'com.github.ben-manes.versions' version '0.17.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  reformLogging: '3.0.1',
  springBoot: springBoot.class.package.implementationVersion,
  springCloud: 'Finchley.M9',
  springHystrix: '1.4.4.RELEASE',
  springfoxSwagger: '2.9.0'
]

allprojects {
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'
  apply plugin: 'jacoco'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  sourceSets.all { set ->
    if (!tasks.findByName(set.name) && set.name.indexOf('Test') > 0) {
      println("setting up $project.name:$set.name")

      set.java {
        compileClasspath += project.sourceSets.main.output
        runtimeClasspath += project.sourceSets.main.output
        srcDirs += file("$project.name/$set.name/java")
      }
      set.resources {
        srcDirs += file("$project.name/$set.name/resources")
      }

      def taskName = set.name.substring(0, set.name.indexOf('Test'))

      task([type: Test, description: "Runs the $taskName tests.", group: 'Verification'], taskName) << {
        testClassesDirs = set.output.classesDirs
        classpath = set.runtimeClasspath
      }
    } else {
      println("$project.name:$set.name already exists as a task")
    }
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
  }

  checkstyle {
    maxWarnings = 0
    toolVersion = '8.9'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
  }

  pmd {
    toolVersion = "6.3.0"
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("$rootDir/config/pmd/ruleset.xml")
  }

  repositories {
    jcenter()
    // until new projects get to jcenter
    maven {
      url  "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    // remove once spring sorts out their cloud artifact to proper version
    maven {
      url "https://repo.spring.io/libs-milestone"
    }
  }
}

subprojects {
  sourceSets {
    integrationTest
  }

  pmd {
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
  }

  dependencies {
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot

    integrationTestCompile sourceSets.main.runtimeClasspath
    integrationTestCompile sourceSets.test.runtimeClasspath
  }
}

sourceSets {
  functionalTest
  integrationTest
  smokeTest
}

pmd {
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
}

jacocoTestReport {
  dependsOn = [allprojects*.test, allprojects*.integration]

  executionData allprojects.collectMany {
    ["$it.buildDir/jacoco/test.exec", "$it.buildDir/jacoco/integration.exec"]
  }

  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }

  doFirst {
    executionData = files(executionData.findAll {
      it.exists()
    })
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  dependencies {
    dependencySet(group: 'com.google.guava', version: '20.0') {
      entry 'guava'
    }
    // spring boot dependency management plugin downgrades
    // hystrix related libraries use 2.4.3 and not clear if plan to upgrade
    // bump to 2.9.5 because of https://nvd.nist.gov/vuln/detail/CVE-2018-7489
    dependencySet(group: 'com.fasterxml.jackson.core', version: '2.9.5') {
      entry 'jackson-annotations'
      entry 'jackson-core'
      entry 'jackson-databind'
    }
  }
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:${versions.springBoot}"
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
  }
}

dependencies {
  compileOnly project(':feature-toggle-core')

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging

  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springHystrix
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix-dashboard', version: versions.springHystrix

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  functionalTestCompile sourceSets.main.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath
  smokeTestCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.1.0'
  smokeTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  // move to `compile`
  smokeTestCompileOnly group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformLogging
}

mainClassName = 'uk.gov.hmcts.reform.feature.Application'

bootJar {
  archiveName = 'feature-toggle-api.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
